using System.Text;

namespace RandoopMain
{
    public class TestGenerator
    {
        public static void GenerateTests(string dllPath, string outputPath)
        {
            var reflectedClasses = DllCollector.Collect(dllPath);
            var sb = new StringBuilder();

            sb.AppendLine("using TestLibrary;");
            sb.AppendLine();
            sb.AppendLine("namespace GeneratedTests");
            sb.AppendLine("{");
            sb.AppendLine("    public class AutoGeneratedTests");
            sb.AppendLine("    {");

            // Loop through each collected class.
            foreach (var rClass in reflectedClasses)
            {
                string typeName = rClass.FullName;
                string simpleName = rClass.SimpleName;
                string instanceExpr = "";

                // If the class has a public constructor, we can instantiate it
                if (rClass.CanInstantiate)
                {
                    instanceExpr = $"new {typeName}()";
                }

                foreach (var method in rClass.Methods)
                {
                    // Generate a unique test method name
                    string testName = $"Test_{simpleName}_{method.Name}";

                    // method declaration.
                    sb.AppendLine("        public void " + testName + "()"); // adding 2 indentaions ( for nice formatting in test file )
                    sb.AppendLine("        {");

                    // If method is not static, create an instance to call it on
                    if (!method.IsStatic && instanceExpr != null)
                    {
                        sb.AppendLine($"            var instance = {instanceExpr};"); // adding 3 indentaions
                    }

                    // Generate dummy arguments to call the method with
                    var callArgs = string.Join(", ", method.ParameterTypes.Select(GetDummyArg));

                    // Determine what object the method will be called on.
                    string callTarget;

                    if (method.IsStatic)
                    {
                        callTarget = typeName;
                    }
                    else
                    {
                        callTarget = "instance";
                    }

                    // Write the method call inside the test.
                    sb.AppendLine($"            {callTarget}.{method.Name}({callArgs});");
                    sb.AppendLine("        }");
                    sb.AppendLine();
                }
            }

            sb.AppendLine("    }");
            sb.AppendLine("}");

            File.WriteAllText(outputPath, sb.ToString());
            Console.WriteLine("Test file generated at: " + outputPath);
        }

        private static string GetDummyArg(Type type)
        {
            if (type == typeof(int)) return "0";
            if (type == typeof(double)) return "0.0";
            if (type == typeof(string)) return "\"test\"";
            if (type == typeof(bool)) return "false";
            if (type == typeof(object)) return "new object()"; // If the parameter is an object, return a new object instance
            if (type.IsValueType) return $"default({type.Name})"; // If it's any other value type (like a struct), return its default value
            return "null"; //  when the parameter type is a reference type
        }
    }
}
